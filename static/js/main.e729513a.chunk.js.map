{"version":3,"sources":["board/boardSlice.ts","board/getArrayFunctions.ts","common/TextWithExplane.tsx","board/view/Cell.tsx","board/view/Sea.tsx","board/connect/SeaConnect.tsx","common/Button.tsx","board/connect/PlayAgainConnect.tsx","board/view/Game.tsx","board/connect/GameConnect.tsx","board/view/GameName.tsx","common/Select.tsx","board/connect/PlayConnect.tsx","board/view/GameSettings.tsx","board/connect/GameSettingsConnect.tsx","board/view/Rulles.tsx","board/view/Board.tsx","board/connect/BoardConnect.tsx","App.tsx","app/store.tsx","index.tsx"],"names":["boardSlice","createSlice","name","initialState","selectSeaSize","seaSize","numberOfShips","play","currentPlayer","winner","player1","move","ships","destroyedShips","player2","reducers","reset","state","action","payload","movePlayer1","includes","filter","ship","push","length","shipsPlayer1","movePlayer2","shipsPlayer2","actions","selectBoard","board","getBoardArray","Array","from","v","k","getRandomShip","Math","round","random","getShipsPlayer","i","TextWithExplane","explane","union","text","className","Cell","id","disabled","onTarget","xChoice","type","onClick","Sea","player","oponent","map","style","background","SeaConnect","seaOwner","useSelector","dispatch","useDispatch","Button","PlayAgainConnect","Game","GameConnect","React","useEffect","GameName","Select","labelText","defaultValue","selectArray","setValue","viewModificator","onChange","event","Number","target","value","item","PlayConnect","firstPlayer","GameSettings","seaSizeArray","setSeaSize","numberOfShipsArray","setNumberOfShips","size","number","GameSettingsConnect","min","max","Rulles","useState","isOpen","setIsOpen","hidden","Board","BoardConnect","App","configureStore","reducer","boardReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.e729513a.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface KeyStringInterface {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface BoardInterface extends KeyStringInterface {\r\n  selectSeaSize: Array<number>;\r\n  seaSize: number;\r\n  numberOfShips: number;\r\n  play: boolean;\r\n  currentPlayer: string | null;\r\n  winner: string | null;\r\n  player1: PlayerInterface;\r\n  player2: PlayerInterface;\r\n}\r\n\r\ninterface StateInterface {\r\n  board: BoardInterface;\r\n}\r\n\r\nfunction initialBoard(): BoardInterface {\r\n  return {\r\n    selectSeaSize: [3, 4, 5],\r\n    seaSize: 3,\r\n    numberOfShips: 3,\r\n    play: false,\r\n    currentPlayer: null,\r\n    winner: null,\r\n    player1: {\r\n      name: \"player1\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n    player2: {\r\n      name: \"player2\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n  };\r\n}\r\n\r\nexport const boardSlice = createSlice({\r\n  name: \"board\",\r\n  initialState: initialBoard(),\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.currentPlayer = null;\r\n      state.play = false;\r\n      state.winner = null;\r\n      state.player1 = {\r\n        name: \"player1\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n      state.player2 = {\r\n        name: \"player2\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n    },\r\n    seaSize: (state, action) => {\r\n      state.seaSize = action.payload;\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    numberOfShips: (state, action) => {\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    play: (state, action) => {\r\n      state.play = true;\r\n      state.currentPlayer = action.payload;\r\n    },\r\n    winner: (state, action) => {\r\n      state.winner = action.payload;\r\n    },\r\n    movePlayer1: (state, action) => {\r\n      state.player1.move = [...state.player1.move, action.payload];\r\n      if (state.player2.ships.includes(action.payload)) {\r\n        state.player2.ships = state.player2.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player2.destroyedShips.push(action.payload);\r\n      }\r\n      if (state.player2.ships.length === 0) state.winner = \"player1\";\r\n      state.currentPlayer = \"player2\";\r\n    },\r\n    shipsPlayer1: (state, action) => {\r\n      state.player1.ships = action.payload;\r\n    },\r\n    movePlayer2: (state, action) => {\r\n      state.player2.move = [...state.player2.move, action.payload];\r\n      if (state.player1.ships.includes(action.payload)) {\r\n        state.player1.ships = state.player1.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player1.destroyedShips.push(action.payload);\r\n      }\r\n      if (state.player1.ships.length === 0) state.winner = \"player2\";\r\n      state.currentPlayer = \"player1\";\r\n    },\r\n    shipsPlayer2: (state, action) => {\r\n      state.player2.ships = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  reset,\r\n  seaSize,\r\n  numberOfShips,\r\n  play,\r\n  winner,\r\n  movePlayer1,\r\n  shipsPlayer1,\r\n  movePlayer2,\r\n  shipsPlayer2,\r\n} = boardSlice.actions;\r\n\r\nexport const selectBoard = (state: StateInterface) => state.board;\r\n\r\nexport default boardSlice.reducer;\r\n","export function getBoardArray(seaSize: number) {\r\n  const boardArray = Array.from({ length: seaSize * seaSize }, (v, k) => k + 1);\r\n  return boardArray;\r\n}\r\n\r\nfunction getRandomShip(seaSize: number) {\r\n  const ship = Math.round(seaSize * seaSize * Math.random());\r\n  return ship !== 0 ? ship : 1;\r\n}\r\n\r\nexport function getShipsPlayer(numberOfShips: number, seaSize: number) {\r\n  let ships: Array<number> = [];\r\n  for (let i = 1; i <= numberOfShips; i++) {\r\n    let ship;\r\n    do {\r\n      ship = getRandomShip(seaSize);\r\n    } while (ships.includes(ship));\r\n    ships = [...ships, ship];\r\n  }\r\n  return ships;\r\n}\r\n\r\nexport function getShipsArray(min: number, max: number) {\r\n  const shipsArray = Array.from({ length: max - min + 1 }, (v, k) => k + min);\r\n  return shipsArray;\r\n}\r\n","import React from \"react\";\r\n\r\ninterface TextWithExplaneInterface {\r\n  explane: string;\r\n  union: string;\r\n  text: string | null;\r\n}\r\n\r\nexport function TextWithExplane({\r\n  explane,\r\n  union,\r\n  text,\r\n}: TextWithExplaneInterface) {\r\n  return (\r\n    <div className=\"italic font-bold\">\r\n      {explane} {union} {text}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface CellInterface {\r\n  id: number;\r\n  disabled: boolean;\r\n  onTarget: (id: number) => void;\r\n  xChoice: boolean;\r\n}\r\n\r\nexport function Cell({ id, disabled, onTarget, xChoice }: CellInterface) {\r\n  const enabledStyle = `\r\n    w-8 \r\n    text-black \r\n    cursor-pointer \r\n    rounded-xl\r\n    bg-blue-100 \r\n    hover:bg-red-100 \r\n    `;\r\n  const disabledStyle = `\r\n    w-8 \r\n    text-gray-200 \r\n    cursor-not-allowed \r\n    `;\r\n\r\n  return (\r\n    <button\r\n      className={disabled ? disabledStyle : enabledStyle}\r\n      type=\"button\"\r\n      onClick={() => onTarget(id)}\r\n      disabled={disabled}\r\n    >\r\n      {xChoice ? \"x\" : id}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { getBoardArray } from \"../getArrayFunctions\";\r\nimport { Cell } from \"./Cell\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface SeaInterface {\r\n  seaSize: number;\r\n  currentPlayer: string | null;\r\n  player: PlayerInterface;\r\n  oponent: PlayerInterface;\r\n  onTarget: (id: number) => void;\r\n}\r\n\r\nexport function Sea({\r\n  seaSize,\r\n  currentPlayer,\r\n  player,\r\n  oponent,\r\n  onTarget,\r\n}: SeaInterface) {\r\n  return (\r\n    <div className=\"w-1/2 p-2\">\r\n      <p>{player.name}</p>\r\n      <p>have a </p>\r\n      <p>\r\n        <span className=\"font-bold\">{player.ships.length}</span>{\" \"}\r\n        {player.ships.length === 1 ? \"ship\" : \"ships\"}\r\n      </p>\r\n      {getBoardArray(seaSize).map((id) => {\r\n        return (\r\n          <span\r\n            key={id}\r\n            className=\"rounded-r-none rounded-l-xl\"\r\n            style={\r\n              player.destroyedShips.includes(id)\r\n                ? { background: \"#f00\" }\r\n                : { background: \"none\" }\r\n            }\r\n          >\r\n            <Cell\r\n              id={id}\r\n              disabled={\r\n                currentPlayer === player.name || oponent.move.includes(id)\r\n              }\r\n              onTarget={onTarget}\r\n              xChoice={oponent.move.includes(id)}\r\n            />\r\n            {id % seaSize ? null : <br />}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { movePlayer1, movePlayer2, selectBoard } from \"../boardSlice\";\r\nimport { Sea } from \"../view/Sea\";\r\n\r\ninterface SeaConnectInterface {\r\n  seaOwner: string;\r\n}\r\n\r\nexport function SeaConnect({ seaOwner }: SeaConnectInterface) {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleTarget(id: number) {\r\n    if (board.currentPlayer === \"player1\") {\r\n      dispatch(movePlayer1(id));\r\n    }\r\n    if (board.currentPlayer === \"player2\") {\r\n      dispatch(movePlayer2(id));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Sea\r\n      seaSize={board.seaSize}\r\n      currentPlayer={board.currentPlayer}\r\n      player={board[seaOwner]}\r\n      oponent={board[seaOwner === \"player1\" ? \"player2\" : \"player1\"]}\r\n      onTarget={handleTarget}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ButtonInterface {\r\n  text: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport function Button({ text, onClick }: ButtonInterface) {\r\n  const style = `\r\n    py-2\r\n    px-4 \r\n    bg-blue-600 \r\n    hover:bg-blue-800 \r\n    text-white \r\n    transition-all \r\n    duration-1000\r\n    rounded \r\n    shadow-md\r\n    hover:shadow-none\r\n    cursor-pointer\r\n    focus:outline-none \r\n    focus:shadow-outline\r\n    `;\r\n\r\n  return (\r\n    <button onClick={onClick} className={style}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { reset } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayAgainConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleReset() {\r\n    dispatch(reset());\r\n  }\r\n\r\n  return <Button text=\"PLAY AGAIN\" onClick={handleReset} />;\r\n}\r\n","import React from \"react\";\r\nimport { TextWithExplane } from \"../../common/TextWithExplane\";\r\nimport { SeaConnect } from \"../connect/SeaConnect\";\r\nimport { PlayAgainConnect } from \"../connect/PlayAgainConnect\";\r\n\r\ninterface GameInterface {\r\n  winner: string | null;\r\n  currentPlayer: string | null;\r\n}\r\n\r\nexport function Game({ winner, currentPlayer }: GameInterface) {\r\n  return winner ? (\r\n    <>\r\n      <TextWithExplane explane=\"Winner the game\" union=\"-\" text={winner} />\r\n      <br />\r\n      <PlayAgainConnect />\r\n    </>\r\n  ) : (\r\n    <div className=\"flex flex-col\">\r\n      <TextWithExplane explane=\"Next move\" union=\"-\" text={currentPlayer} />\r\n      <div className=\"flex justify-center\">\r\n        <SeaConnect seaOwner={\"player1\"} />\r\n        <SeaConnect seaOwner={\"player2\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard, shipsPlayer1, shipsPlayer2 } from \"../boardSlice\";\r\nimport { getShipsPlayer } from \"../getArrayFunctions\";\r\nimport { Game } from \"../view/Game\";\r\n\r\nexport function GameConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(shipsPlayer1(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n    dispatch(shipsPlayer2(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n  }, [dispatch, board.numberOfShips, board.seaSize]);\r\n\r\n  return <Game currentPlayer={board.currentPlayer} winner={board.winner} />;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function GameName() {\r\n  return (\r\n    <span className=\"text-6xl p-4 bg-blue-600 italic text-white\">\r\n      SEA BATTLESHIP\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface SelectInterface {\r\n  labelText: string;\r\n  defaultValue: number;\r\n  selectArray: Array<number>;\r\n  setValue: (value: number) => void;\r\n  viewModificator: (value: number) => string;\r\n}\r\n\r\nexport function Select({\r\n  labelText,\r\n  defaultValue,\r\n  selectArray,\r\n  setValue,\r\n  viewModificator,\r\n}: SelectInterface) {\r\n  \r\n  function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\r\n    setValue(Number(event.target.value));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <label>{labelText}</label>\r\n      <br />\r\n      <select defaultValue={defaultValue} onChange={handleChange}>\r\n        {selectArray.map((item) => {\r\n          return (\r\n            <option key={item} value={item}>\r\n              {viewModificator(item)}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { play } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handlePlay() {\r\n    const firstPlayer = Math.random() > 0.5 ? \"player1\" : \"player2\";\r\n    dispatch(play(firstPlayer));\r\n  }\r\n\r\n  return <Button text=\"PLAY\" onClick={handlePlay} />;\r\n}\r\n","import React from \"react\";\r\nimport { Select } from \"../../common/Select\";\r\nimport { PlayConnect } from \"../connect/PlayConnect\";\r\n\r\ninterface GameSettimngsInterface {\r\n  seaSize: number;\r\n  seaSizeArray: Array<number>;\r\n  setSeaSize: (value: number) => void;\r\n  numberOfShips: number;\r\n  numberOfShipsArray: Array<number>;\r\n  setNumberOfShips: (value: number) => void;\r\n}\r\n\r\nexport function GameSettings({\r\n  seaSize,\r\n  seaSizeArray,\r\n  setSeaSize,\r\n  numberOfShips,\r\n  numberOfShipsArray,\r\n  setNumberOfShips,\r\n}: GameSettimngsInterface) {\r\n  return (\r\n    <div className=\"m-4\">\r\n      <Select\r\n        labelText=\"Sea size\"\r\n        defaultValue={seaSize}\r\n        selectArray={seaSizeArray}\r\n        setValue={setSeaSize}\r\n        viewModificator={(size: number) => `${size} x ${size}`}\r\n      />\r\n      <br />\r\n      <Select\r\n        labelText=\"Number of ships\"\r\n        defaultValue={numberOfShips}\r\n        selectArray={numberOfShipsArray}\r\n        setValue={setNumberOfShips}\r\n        viewModificator={(number: number) => `${number}`}\r\n      />\r\n      <br />\r\n      <PlayConnect />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { seaSize, numberOfShips } from \"../boardSlice\";\r\nimport { GameSettings } from \"../view/GameSettings\";\r\nimport { getShipsArray } from \"../getArrayFunctions\";\r\n\r\nexport function GameSettingsConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  const numberOfShipsArray = getShipsArray(\r\n    board.seaSize,\r\n    Math.round((board.seaSize * board.seaSize) / 2)\r\n  );\r\n\r\n  function setSeaSize(value: number) {\r\n    dispatch(seaSize(value));\r\n  }\r\n\r\n  function setNumberOfShips(value: number) {\r\n    dispatch(numberOfShips(value));\r\n  }\r\n\r\n  return (\r\n    <GameSettings\r\n      seaSize={board.seaSize}\r\n      seaSizeArray={board.selectSeaSize}\r\n      setSeaSize={setSeaSize}\r\n      numberOfShips={board.numberOfShips}\r\n      numberOfShipsArray={numberOfShipsArray}\r\n      setNumberOfShips={setNumberOfShips}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Rulles() {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const style = `\r\n    text-blue-500 \r\n    hover:text-blue-800 \r\n    cursor-pointer\r\n    `;\r\n  return (\r\n    <div>\r\n      <span\r\n        className={isOpen ? style : `underline ${style}`}\r\n        onClick={() => {\r\n          setIsOpen(!isOpen);\r\n        }}\r\n      >\r\n        Rulles the game\r\n      </span>\r\n      <div hidden={!isOpen}>\r\n        <p>You have several solo ships.</p>\r\n        <p>They are distributed randomly across the playing field.</p>\r\n        <p>The first move is made by the player who got the random choice.</p>\r\n        <p>Each player makes one move, regardless of hitting the target.</p>\r\n        <p>\r\n          The winner is the player who knocks out all the ships from the enemy\r\n          field.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { GameConnect } from \"../connect/GameConnect\";\r\nimport { GameName } from \"./GameName\";\r\nimport { GameSettingsConnect } from \"../connect/GameSettingsConnect\";\r\nimport { Rulles } from \"./Rulles\";\r\n\r\ninterface BoardInterface {\r\n  play: boolean;\r\n}\r\n\r\nexport function Board({ play }: BoardInterface) {\r\n  return (\r\n    <div className=\"p-4 flex flex-col items-center justify-center text-center\">\r\n      <GameName />\r\n      {play ? <GameConnect /> : <GameSettingsConnect />}\r\n      <br />\r\n      <Rulles />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { Board } from \"../view/Board\";\r\n\r\nexport function BoardConnect() {\r\n  const board = useSelector(selectBoard);\r\n  return <Board play={board.play} />;\r\n}\r\n","import React from 'react';\nimport { BoardConnect } from \"./board/connect/BoardConnect\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <BoardConnect />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport boardReducer from \"../board/boardSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  }\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}