{"version":3,"sources":["board/boardSlice.ts","board/getArrayFunctions.ts","common/TextWithExplane.tsx","board/view/Cell.tsx","board/playerColorAndShip.tsx","board/view/Sea.tsx","board/connect/SeaConnect.tsx","common/Button.tsx","board/connect/PlayAgainConnect.tsx","board/view/Game.tsx","board/connect/GameConnect.tsx","board/view/GameName.tsx","common/Select.tsx","board/connect/PlayConnect.tsx","board/view/GameSettings.tsx","board/connect/GameSettingsConnect.tsx","board/view/Rulles.tsx","board/view/Board.tsx","board/connect/BoardConnect.tsx","common/Background.tsx","App.tsx","app/store.tsx","index.tsx"],"names":["boardSlice","createSlice","name","initialState","selectSeaSize","seaSize","numberOfShips","play","currentPlayer","winner","player1","move","ships","destroyedShips","player2","reducers","reset","state","action","payload","movePlayer1","includes","filter","ship","push","length","shipsPlayer1","movePlayer2","shipsPlayer2","actions","selectBoard","board","getBoardArray","Array","from","v","k","getRandomShip","Math","round","random","getShipsPlayer","i","TextWithExplane","explane","union","text","color","className","Cell","id","disabled","onTarget","destroyed","style","enabledStyle","disabledStyle","type","onClick","playerColor","playerShip","Sea","player","oponent","shipStyle","map","SeaConnect","seaOwner","useSelector","dispatch","useDispatch","Button","PlayAgainConnect","Game","undefined","GameConnect","React","useEffect","GameName","Select","labelText","defaultValue","selectArray","setValue","viewModificator","onChange","event","Number","target","value","item","PlayConnect","firstPlayer","GameSettings","seaSizeArray","setSeaSize","numberOfShipsArray","setNumberOfShips","size","number","GameSettingsConnect","min","max","Rulles","useState","isOpen","setIsOpen","hidden","Board","BoardConnect","Background","App","configureStore","reducer","boardReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f7ed4f4a.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface KeyStringInterface {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface BoardInterface extends KeyStringInterface {\r\n  selectSeaSize: Array<number>;\r\n  seaSize: number;\r\n  numberOfShips: number;\r\n  play: boolean;\r\n  currentPlayer: string | null;\r\n  winner: string | null;\r\n  player1: PlayerInterface;\r\n  player2: PlayerInterface;\r\n}\r\n\r\ninterface StateInterface {\r\n  board: BoardInterface;\r\n}\r\n\r\nfunction initialBoard(): BoardInterface {\r\n  return {\r\n    selectSeaSize: [3, 4, 5],\r\n    seaSize: 3,\r\n    numberOfShips: 3,\r\n    play: false,\r\n    currentPlayer: null,\r\n    winner: null,\r\n    player1: {\r\n      name: \"player1\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n    player2: {\r\n      name: \"player2\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n  };\r\n}\r\n\r\nexport const boardSlice = createSlice({\r\n  name: \"board\",\r\n  initialState: initialBoard(),\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.currentPlayer = null;\r\n      state.play = false;\r\n      state.winner = null;\r\n      state.player1 = {\r\n        name: \"player1\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n      state.player2 = {\r\n        name: \"player2\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n    },\r\n    seaSize: (state, action) => {\r\n      state.seaSize = action.payload;\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    numberOfShips: (state, action) => {\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    play: (state, action) => {\r\n      state.play = true;\r\n      state.currentPlayer = action.payload;\r\n    },\r\n    winner: (state, action) => {\r\n      state.winner = action.payload;\r\n    },\r\n    movePlayer1: (state, action) => {\r\n      state.player1.move = [...state.player1.move, action.payload];\r\n      if (state.player2.ships.includes(action.payload)) {\r\n        state.player2.ships = state.player2.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player2.destroyedShips.push(action.payload);\r\n      }\r\n      if (state.player2.ships.length === 0) state.winner = \"player1\";\r\n      state.currentPlayer = \"player2\";\r\n    },\r\n    shipsPlayer1: (state, action) => {\r\n      state.player1.ships = action.payload;\r\n    },\r\n    movePlayer2: (state, action) => {\r\n      state.player2.move = [...state.player2.move, action.payload];\r\n      if (state.player1.ships.includes(action.payload)) {\r\n        state.player1.ships = state.player1.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player1.destroyedShips.push(action.payload);\r\n      }\r\n      if (state.player1.ships.length === 0) state.winner = \"player2\";\r\n      state.currentPlayer = \"player1\";\r\n    },\r\n    shipsPlayer2: (state, action) => {\r\n      state.player2.ships = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  reset,\r\n  seaSize,\r\n  numberOfShips,\r\n  play,\r\n  winner,\r\n  movePlayer1,\r\n  shipsPlayer1,\r\n  movePlayer2,\r\n  shipsPlayer2,\r\n} = boardSlice.actions;\r\n\r\nexport const selectBoard = (state: StateInterface) => state.board;\r\n\r\nexport default boardSlice.reducer;\r\n","export function getBoardArray(seaSize: number) {\r\n  const boardArray = Array.from({ length: seaSize * seaSize }, (v, k) => k + 1);\r\n  return boardArray;\r\n}\r\n\r\nfunction getRandomShip(seaSize: number) {\r\n  const ship = Math.round(seaSize * seaSize * Math.random());\r\n  return ship !== 0 ? ship : 1;\r\n}\r\n\r\nexport function getShipsPlayer(numberOfShips: number, seaSize: number) {\r\n  let ships: Array<number> = [];\r\n  for (let i = 1; i <= numberOfShips; i++) {\r\n    let ship;\r\n    do {\r\n      ship = getRandomShip(seaSize);\r\n    } while (ships.includes(ship));\r\n    ships = [...ships, ship];\r\n  }\r\n  return ships;\r\n}\r\n\r\nexport function getShipsArray(min: number, max: number) {\r\n  const shipsArray = Array.from({ length: max - min + 1 }, (v, k) => k + min);\r\n  return shipsArray;\r\n}\r\n","import React from \"react\";\r\n\r\ninterface TextWithExplaneInterface {\r\n  explane: string;\r\n  union: string;\r\n  text: string | null;\r\n  color?: string | undefined;\r\n}\r\n\r\nexport function TextWithExplane({\r\n  explane,\r\n  union,\r\n  text,\r\n  color = \"red-500\",\r\n}: TextWithExplaneInterface) {\r\n  return (\r\n    <div className=\"italic font-bold\">\r\n      {explane} {union} <span className={`text-${color}`}>{text}</span>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface CellInterface {\r\n  id: number;\r\n  disabled: boolean;\r\n  onTarget: (id: number) => void;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport function Cell({ id, disabled, onTarget, destroyed }: CellInterface) {\r\n  const style = `\r\n    h-16\r\n    w-full\r\n    border \r\n    border-dashed \r\n    border-black\r\n    text-4xl\r\n    `;\r\n\r\n  const enabledStyle = `\r\n    ${style}\r\n    text-white \r\n    cursor-pointer \r\n    bg-blue-500 \r\n    hover:bg-red-500 \r\n    `;\r\n  const disabledStyle = `\r\n    ${style}\r\n    text-blue-900 \r\n    cursor-not-allowed \r\n    `;\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className={disabled ? disabledStyle : enabledStyle}\r\n        type=\"button\"\r\n        onClick={() => onTarget(id)}\r\n        disabled={disabled}\r\n      >\r\n        {destroyed ? \"x\" : \"~\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","interface StringStringInterface {\r\n  [key: string]: string;\r\n}\r\n\r\nexport const playerColor: StringStringInterface = {\r\n  player1: \"green-500\",\r\n  player2: \"yellow-500\",\r\n};\r\n\r\nexport const playerShip: StringStringInterface = {\r\n  player1: \"right-0\",\r\n  player2: \"left-0\",\r\n};\r\n","import React from \"react\";\r\nimport { getBoardArray } from \"../getArrayFunctions\";\r\nimport { Cell } from \"./Cell\";\r\nimport { playerColor, playerShip } from \"../playerColorAndShip\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface SeaInterface {\r\n  seaSize: number;\r\n  currentPlayer: string | null;\r\n  player: PlayerInterface;\r\n  oponent: PlayerInterface;\r\n  onTarget: (id: number) => void;\r\n}\r\n\r\nexport function Sea({\r\n  seaSize,\r\n  currentPlayer,\r\n  player,\r\n  oponent,\r\n  onTarget,\r\n}: SeaInterface) {\r\n  const shipStyle = `\r\n    absolute \r\n    w-1/5 \r\n    h-1/5 \r\n    bg-blue-900 \r\n    border \r\n    border-dashed \r\n    border-black\r\n    `;\r\n  return (\r\n    <div className={`w-1/2 p-2 text-${playerColor[player.name]}`}>\r\n      <p>\r\n        {player.name} have a{\" \"}\r\n        <span className=\"font-bold\">{player.ships.length}</span>{\" \"}\r\n        {player.ships.length === 1 ? \"ship\" : \"ships\"}\r\n      </p>\r\n      <div className={`flex flex-wrap bg-blue-900`}>\r\n        {getBoardArray(seaSize).map((id) => {\r\n          return (\r\n            <div\r\n              key={id}\r\n              className={`\r\n                relative \r\n                w-1/${seaSize} \r\n                ${\r\n                  player.destroyedShips.includes(id)\r\n                    ? `bg-${playerColor[player.name]}`\r\n                    : null\r\n                }`}\r\n            >\r\n              {player.destroyedShips.includes(id) ? (\r\n                <>\r\n                  <div\r\n                    className={`top-0 ${shipStyle} ${playerShip[player.name]}`}\r\n                  ></div>\r\n                  <div\r\n                    className={`bottom-0 ${shipStyle} ${\r\n                      playerShip[player.name]\r\n                    }`}\r\n                  ></div>\r\n                </>\r\n              ) : null}\r\n              <Cell\r\n                id={id}\r\n                disabled={\r\n                  currentPlayer === player.name || oponent.move.includes(id)\r\n                }\r\n                onTarget={onTarget}\r\n                destroyed={player.destroyedShips.includes(id)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { movePlayer1, movePlayer2, selectBoard } from \"../boardSlice\";\r\nimport { Sea } from \"../view/Sea\";\r\n\r\ninterface SeaConnectInterface {\r\n  seaOwner: string;\r\n}\r\n\r\nexport function SeaConnect({ seaOwner }: SeaConnectInterface) {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleTarget(id: number) {\r\n    if (board.currentPlayer === \"player1\") {\r\n      dispatch(movePlayer1(id));\r\n    }\r\n    if (board.currentPlayer === \"player2\") {\r\n      dispatch(movePlayer2(id));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Sea\r\n      seaSize={board.seaSize}\r\n      currentPlayer={board.currentPlayer}\r\n      player={board[seaOwner]}\r\n      oponent={board[seaOwner === \"player1\" ? \"player2\" : \"player1\"]}\r\n      onTarget={handleTarget}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ButtonInterface {\r\n  text: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport function Button({ text, onClick }: ButtonInterface) {\r\n  const style = `\r\n    py-2\r\n    px-4 \r\n    bg-blue-600 \r\n    hover:bg-blue-800 \r\n    text-white \r\n    transition-all \r\n    duration-1000\r\n    rounded \r\n    shadow-md\r\n    hover:shadow-none\r\n    cursor-pointer\r\n    focus:outline-none \r\n    focus:shadow-outline\r\n    `;\r\n\r\n  return (\r\n    <button onClick={onClick} className={style}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { reset } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayAgainConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleReset() {\r\n    dispatch(reset());\r\n  }\r\n\r\n  return <Button text=\"PLAY AGAIN\" onClick={handleReset} />;\r\n}\r\n","import React from \"react\";\r\nimport { TextWithExplane } from \"../../common/TextWithExplane\";\r\nimport { SeaConnect } from \"../connect/SeaConnect\";\r\nimport { PlayAgainConnect } from \"../connect/PlayAgainConnect\";\r\nimport { playerColor } from \"../playerColorAndShip\";\r\n\r\ninterface GameInterface {\r\n  winner: string | null;\r\n  currentPlayer: string | null;\r\n}\r\n\r\nexport function Game({ winner, currentPlayer }: GameInterface) {\r\n  return winner ? (\r\n    <>\r\n      <TextWithExplane\r\n        explane=\"Winner the game\"\r\n        union=\"-\"\r\n        text={winner}\r\n        color={currentPlayer !== null ? playerColor[winner] : undefined}\r\n      />\r\n      <br />\r\n      <PlayAgainConnect />\r\n    </>\r\n  ) : (\r\n    <div className=\"flex flex-col\">\r\n      <TextWithExplane\r\n        explane=\"Next move\"\r\n        union=\"-\"\r\n        text={currentPlayer}\r\n        color={currentPlayer !== null ? playerColor[currentPlayer] : undefined}\r\n      />\r\n      <div className=\"flex w-screen justify-center\">\r\n        <SeaConnect seaOwner={\"player1\"} />\r\n        <SeaConnect seaOwner={\"player2\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard, shipsPlayer1, shipsPlayer2 } from \"../boardSlice\";\r\nimport { getShipsPlayer } from \"../getArrayFunctions\";\r\nimport { Game } from \"../view/Game\";\r\n\r\nexport function GameConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(shipsPlayer1(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n    dispatch(shipsPlayer2(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n  }, [dispatch, board.numberOfShips, board.seaSize]);\r\n\r\n  return <Game currentPlayer={board.currentPlayer} winner={board.winner} />;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function GameName() {\r\n  return (\r\n    <span className=\"text-6xl p-4 italic\">\r\n      <span className=\"text-green-500\">SEA</span>{\" \"}\r\n      <span className=\"text-yellow-500\">BATTLESHIP</span>\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ninterface SelectInterface {\r\n  labelText: string;\r\n  defaultValue: number;\r\n  selectArray: Array<number>;\r\n  setValue: (value: number) => void;\r\n  viewModificator: (value: number) => string;\r\n}\r\n\r\nexport function Select({\r\n  labelText,\r\n  defaultValue,\r\n  selectArray,\r\n  setValue,\r\n  viewModificator,\r\n}: SelectInterface) {\r\n  function handleChange(event: React.ChangeEvent<HTMLSelectElement>) {\r\n    setValue(Number(event.target.value));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <label>{labelText}</label>\r\n      <br />\r\n      <select\r\n        className=\"bg-blue-900 cursor-pointer\"\r\n        defaultValue={defaultValue}\r\n        onChange={handleChange}\r\n      >\r\n        {selectArray.map((item) => {\r\n          return (\r\n            <option key={item} value={item}>\r\n              {viewModificator(item)}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { play } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handlePlay() {\r\n    const firstPlayer = Math.random() > 0.5 ? \"player1\" : \"player2\";\r\n    dispatch(play(firstPlayer));\r\n  }\r\n\r\n  return <Button text=\"PLAY\" onClick={handlePlay} />;\r\n}\r\n","import React from \"react\";\r\nimport { Select } from \"../../common/Select\";\r\nimport { PlayConnect } from \"../connect/PlayConnect\";\r\n\r\ninterface GameSettimngsInterface {\r\n  seaSize: number;\r\n  seaSizeArray: Array<number>;\r\n  setSeaSize: (value: number) => void;\r\n  numberOfShips: number;\r\n  numberOfShipsArray: Array<number>;\r\n  setNumberOfShips: (value: number) => void;\r\n}\r\n\r\nexport function GameSettings({\r\n  seaSize,\r\n  seaSizeArray,\r\n  setSeaSize,\r\n  numberOfShips,\r\n  numberOfShipsArray,\r\n  setNumberOfShips,\r\n}: GameSettimngsInterface) {\r\n  return (\r\n    <div className=\"m-4\">\r\n      <Select\r\n        labelText=\"Sea size\"\r\n        defaultValue={seaSize}\r\n        selectArray={seaSizeArray}\r\n        setValue={setSeaSize}\r\n        viewModificator={(size: number) => `${size} x ${size}`}\r\n      />\r\n      <br />\r\n      <Select\r\n        labelText=\"Number of ships\"\r\n        defaultValue={numberOfShips}\r\n        selectArray={numberOfShipsArray}\r\n        setValue={setNumberOfShips}\r\n        viewModificator={(number: number) => `${number}`}\r\n      />\r\n      <br />\r\n      <PlayConnect />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { seaSize, numberOfShips } from \"../boardSlice\";\r\nimport { GameSettings } from \"../view/GameSettings\";\r\nimport { getShipsArray } from \"../getArrayFunctions\";\r\n\r\nexport function GameSettingsConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  const numberOfShipsArray = getShipsArray(\r\n    board.seaSize,\r\n    Math.round((board.seaSize * board.seaSize) / 2)\r\n  );\r\n\r\n  function setSeaSize(value: number) {\r\n    dispatch(seaSize(value));\r\n  }\r\n\r\n  function setNumberOfShips(value: number) {\r\n    dispatch(numberOfShips(value));\r\n  }\r\n\r\n  return (\r\n    <GameSettings\r\n      seaSize={board.seaSize}\r\n      seaSizeArray={board.selectSeaSize}\r\n      setSeaSize={setSeaSize}\r\n      numberOfShips={board.numberOfShips}\r\n      numberOfShipsArray={numberOfShipsArray}\r\n      setNumberOfShips={setNumberOfShips}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Rulles() {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const style = `\r\ntext-white\r\n    cursor-pointer\r\n    `;\r\n  return (\r\n    <div>\r\n      <span\r\n        className={isOpen ? style : `underline ${style}`}\r\n        onClick={() => {\r\n          setIsOpen(!isOpen);\r\n        }}\r\n      >\r\n        Rulles the game\r\n      </span>\r\n      <div className=\"text-left max-w-md\" hidden={!isOpen}>\r\n        <p>You have several solo ships.</p>\r\n        <p>They are distributed randomly across the playing field.</p>\r\n        <p>The first move is made by the player who got the random choice.</p>\r\n        <p>Each player makes one move, regardless of hitting the target.</p>\r\n        <p>\r\n          The winner is the player who knocks out all the ships from the enemy\r\n          field.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { GameConnect } from \"../connect/GameConnect\";\r\nimport { GameName } from \"./GameName\";\r\nimport { GameSettingsConnect } from \"../connect/GameSettingsConnect\";\r\nimport { Rulles } from \"./Rulles\";\r\n\r\ninterface BoardInterface {\r\n  play: boolean;\r\n}\r\n\r\nexport function Board({ play }: BoardInterface) {\r\n  return (\r\n    <div\r\n      className=\"\r\n        p-2 \r\n        h-screen\r\n        flex \r\n        flex-col \r\n        items-center \r\n        justify-center\r\n        text-center text-white\"\r\n    >\r\n      {play ? (\r\n        <GameConnect />\r\n      ) : (\r\n        <>\r\n          <GameName />\r\n          <GameSettingsConnect />\r\n          <br />\r\n          <Rulles />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { Board } from \"../view/Board\";\r\n\r\nexport function BoardConnect() {\r\n  const board = useSelector(selectBoard);\r\n  return <Board play={board.play} />;\r\n}\r\n","export default function Background() {\r\n  return (\r\n    <div\r\n      className={`\r\n        top-0 \r\n        back \r\n        fixed\r\n        h-screen \r\n        w-screen\r\n        bg-blue-900\r\n        `}\r\n    ></div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BoardConnect } from \"./board/connect/BoardConnect\";\nimport Background from \"./common/Background\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoardConnect />\n      <Background />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport boardReducer from \"../board/boardSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  }\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}