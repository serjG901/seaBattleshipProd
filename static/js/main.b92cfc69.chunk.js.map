{"version":3,"sources":["board/boardSlice.ts","board/getArrayFunctions.ts","common/TextWithExplane.tsx","board/view/Cell.tsx","board/playerColorAndShip.ts","board/view/ShipView.tsx","board/view/Sea.tsx","board/connect/SeaConnect.tsx","common/Button.tsx","board/connect/PlayAgainConnect.tsx","board/view/Game.tsx","board/connect/GameConnect.tsx","board/view/GameName.tsx","common/Select.tsx","board/connect/PlayConnect.tsx","board/view/GameSettings.tsx","board/connect/GameSettingsConnect.tsx","board/view/Rulles.tsx","board/view/Board.tsx","board/connect/BoardConnect.tsx","common/Background.tsx","App.tsx","app/store.tsx","index.tsx"],"names":["boardSlice","createSlice","name","initialState","selectSeaSize","seaSize","numberOfShips","play","currentPlayer","winner","player1","move","ships","destroyedShips","player2","reducers","reset","state","window","navigator","vibrate","action","payload","movePlayer1","includes","filter","ship","push","length","shipsPlayer1","movePlayer2","shipsPlayer2","actions","selectBoard","board","getBoardArray","Array","from","v","k","getRandomShip","Math","round","random","getShipsPlayer","i","TextWithExplane","explane","union","text","color","className","Cell","id","disabled","onTarget","destroyed","style","enabledStyle","disabledStyle","type","onClick","fontFamily","colorsPlayer1","colorsPlayer2","playerColor","floor","playerShipDirection","ShipView","direction","shipStyle","Sea","player","oponent","map","SeaConnect","seaOwner","useSelector","dispatch","useDispatch","Button","PlayAgainConnect","Game","undefined","GameConnect","useEffect","GameName","Select","labelText","defaultValue","selectArray","setValue","viewModificator","item","Number","PlayConnect","firstPlayer","GameSettings","seaSizeArray","setSeaSize","numberOfShipsArray","setNumberOfShips","size","number","GameSettingsConnect","min","max","value","Rulles","useState","isOpen","setIsOpen","hidden","Board","BoardConnect","Background","App","configureStore","reducer","boardReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b92cfc69.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface KeyStringInterface {\r\n  [key: string]: any;\r\n}\r\n\r\ninterface BoardInterface extends KeyStringInterface {\r\n  selectSeaSize: Array<number>;\r\n  seaSize: number;\r\n  numberOfShips: number;\r\n  play: boolean;\r\n  currentPlayer: string | null;\r\n  winner: string | null;\r\n  player1: PlayerInterface;\r\n  player2: PlayerInterface;\r\n}\r\n\r\ninterface StateInterface {\r\n  board: BoardInterface;\r\n}\r\n\r\nfunction initialBoard(): BoardInterface {\r\n  return {\r\n    selectSeaSize: [2, 3, 4, 5, 6],\r\n    seaSize: 3,\r\n    numberOfShips: 3,\r\n    play: false,\r\n    currentPlayer: null,\r\n    winner: null,\r\n    player1: {\r\n      name: \"player1\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n    player2: {\r\n      name: \"player2\",\r\n      move: [],\r\n      ships: [],\r\n      destroyedShips: [],\r\n    },\r\n  };\r\n}\r\n\r\nexport const boardSlice = createSlice({\r\n  name: \"board\",\r\n  initialState: initialBoard(),\r\n  reducers: {\r\n    reset: (state) => {\r\n      state.currentPlayer = null;\r\n      state.play = false;\r\n      state.winner = null;\r\n      state.player1 = {\r\n        name: \"player1\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n      state.player2 = {\r\n        name: \"player2\",\r\n        move: [],\r\n        ships: [],\r\n        destroyedShips: [],\r\n      };\r\n      window.navigator.vibrate([100]);\r\n    },\r\n    seaSize: (state, action) => {\r\n      state.seaSize = action.payload;\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    numberOfShips: (state, action) => {\r\n      state.numberOfShips = action.payload;\r\n    },\r\n    play: (state, action) => {\r\n      state.play = true;\r\n      state.currentPlayer = action.payload;\r\n      window.navigator.vibrate([100]);\r\n    },\r\n    winner: (state, action) => {\r\n      state.winner = action.payload;\r\n    },\r\n    movePlayer1: (state, action) => {\r\n      state.player1.move = [...state.player1.move, action.payload];\r\n      window.navigator.vibrate([100]);\r\n      if (state.player2.ships.includes(action.payload)) {\r\n        state.player2.ships = state.player2.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player2.destroyedShips.push(action.payload);\r\n        window.navigator.vibrate([50, 50, 200]);\r\n      }\r\n      if (state.player2.ships.length === 0) {\r\n        state.winner = \"player1\";\r\n        window.navigator.vibrate([\r\n          100,\r\n          50,\r\n          100,\r\n          50,\r\n          200,\r\n          50,\r\n          200,\r\n          50,\r\n          200,\r\n          50,\r\n          100,\r\n        ]);\r\n      }\r\n      state.currentPlayer = \"player2\";\r\n    },\r\n    shipsPlayer1: (state, action) => {\r\n      state.player1.ships = action.payload;\r\n    },\r\n    movePlayer2: (state, action) => {\r\n      state.player2.move = [...state.player2.move, action.payload];\r\n      window.navigator.vibrate([100]);\r\n      if (state.player1.ships.includes(action.payload)) {\r\n        state.player1.ships = state.player1.ships.filter(\r\n          (ship) => ship !== action.payload\r\n        );\r\n        state.player1.destroyedShips.push(action.payload);\r\n        window.navigator.vibrate([50, 50, 200]);\r\n      }\r\n      if (state.player1.ships.length === 0) {\r\n        state.winner = \"player2\";\r\n        window.navigator.vibrate([\r\n          100,\r\n          50,\r\n          100,\r\n          50,\r\n          200,\r\n          50,\r\n          200,\r\n          50,\r\n          500,\r\n          50,\r\n          100,\r\n        ]);\r\n      }\r\n      state.currentPlayer = \"player1\";\r\n    },\r\n    shipsPlayer2: (state, action) => {\r\n      state.player2.ships = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  reset,\r\n  seaSize,\r\n  numberOfShips,\r\n  play,\r\n  winner,\r\n  movePlayer1,\r\n  shipsPlayer1,\r\n  movePlayer2,\r\n  shipsPlayer2,\r\n} = boardSlice.actions;\r\n\r\nexport const selectBoard = (state: StateInterface) => state.board;\r\n\r\nexport default boardSlice.reducer;\r\n","export function getBoardArray(seaSize: number) {\r\n  const boardArray = Array.from({ length: seaSize * seaSize }, (v, k) => k + 1);\r\n  return boardArray;\r\n}\r\n\r\nfunction getRandomShip(seaSize: number) {\r\n  const ship = Math.round(seaSize * seaSize * Math.random());\r\n  return ship !== 0 ? ship : 1;\r\n}\r\n\r\nexport function getShipsPlayer(numberOfShips: number, seaSize: number) {\r\n  let ships: Array<number> = [];\r\n  for (let i = 1; i <= numberOfShips; i++) {\r\n    let ship;\r\n    do {\r\n      ship = getRandomShip(seaSize);\r\n    } while (ships.includes(ship));\r\n    ships = [...ships, ship];\r\n  }\r\n  return ships;\r\n}\r\n\r\nexport function getShipsArray(min: number, max: number) {\r\n  const shipsArray = Array.from({ length: max - min + 1 }, (v, k) => k + min);\r\n  return shipsArray;\r\n}\r\n","interface TextWithExplaneInterface {\r\n  explane: string;\r\n  union: string;\r\n  text: string | null;\r\n  color?: string | undefined;\r\n}\r\n\r\nexport function TextWithExplane({\r\n  explane,\r\n  union,\r\n  text,\r\n  color = \"red-500\",\r\n}: TextWithExplaneInterface) {\r\n  return (\r\n    <div className=\"italic font-bold text-gray-400\">\r\n      <p className={`text-${color}`}>{text}</p>{\" \"}\r\n      <p>\r\n        {explane}\r\n        {union}{\" \"}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","interface CellInterface {\r\n  id: number;\r\n  disabled: boolean;\r\n  onTarget: (id: number) => void;\r\n  destroyed: boolean;\r\n}\r\n\r\nexport function Cell({ id, disabled, onTarget, destroyed }: CellInterface) {\r\n  const style = `\r\n    h-12\r\n    w-full\r\n    border \r\n    border-solid \r\n    border-blue-900\r\n    text-4xl\r\n    `;\r\n\r\n  const enabledStyle = `\r\n    ${style} text-blue-900\r\n    cursor-pointer \r\n    bg-blue-500 \r\n    hover:bg-red-500 \r\n    `;\r\n  const disabledStyle = `\r\n    ${style}\r\n    text-blue-500\r\n    cursor-not-allowed\r\n    ${destroyed ? \"\" : \"bg-blue-900\"}\r\n    `;\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className={disabled ? disabledStyle : enabledStyle}\r\n        type=\"button\"\r\n        onClick={() => onTarget(id)}\r\n        disabled={disabled}\r\n      >\r\n        {destroyed ? (\r\n          <span className=\"text-blue-900\">X</span>\r\n        ) : !disabled ? (\r\n          <span>?</span>\r\n        ) : (\r\n          <span style={{ fontFamily: \"sans-serif\" }}>~</span>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","interface StringStringInterface {\r\n  [key: string]: string;\r\n}\r\n\r\nconst colorsPlayer1: Array<string> = [\r\n  \"green-700\",\r\n  \"pink-700\",\r\n];\r\n\r\nconst colorsPlayer2: Array<string> = [\r\n  \"yellow-700\",\r\n  \"purple-700\",\r\n];\r\n\r\nexport const playerColor: StringStringInterface = {\r\n  player1: colorsPlayer1[Math.floor(Math.random() * colorsPlayer1.length)],\r\n  player2: colorsPlayer2[Math.floor(Math.random() * colorsPlayer2.length)],\r\n};\r\n\r\nexport const playerShipDirection: StringStringInterface = {\r\n  player1: \"right-0\",\r\n  player2: \"left-0\",\r\n};\r\n","interface ShipViewInterface {\r\n  direction: string;\r\n}\r\n\r\nexport function ShipView({ direction }: ShipViewInterface) {\r\n  const shipStyle = `\r\n    absolute \r\n    w-1/5 \r\n    h-1/5 \r\n    bg-blue-900 \r\n    `;\r\n\r\n  return (\r\n    <>\r\n      <div className={`top-0 ${shipStyle} ${direction}`}></div>\r\n      <div className={`bottom-0 ${shipStyle} ${direction}`}></div>\r\n    </>\r\n  );\r\n}\r\n","import { getBoardArray } from \"../getArrayFunctions\";\r\nimport { Cell } from \"./Cell\";\r\nimport { playerColor, playerShipDirection } from \"../playerColorAndShip\";\r\nimport { ShipView } from \"./ShipView\";\r\n\r\ninterface PlayerInterface {\r\n  name: string;\r\n  move: Array<number>;\r\n  ships: Array<number>;\r\n  destroyedShips: Array<number>;\r\n}\r\n\r\ninterface SeaInterface {\r\n  seaSize: number;\r\n  currentPlayer: string | null;\r\n  player: PlayerInterface;\r\n  oponent: PlayerInterface;\r\n  onTarget: (id: number) => void;\r\n}\r\n\r\nexport function Sea({\r\n  seaSize,\r\n  currentPlayer,\r\n  player,\r\n  oponent,\r\n  onTarget,\r\n}: SeaInterface) {\r\n  return (\r\n    <div className={`w-1/2 px-2 pb-2 bg-blue-900 text-${playerColor[player.name]}`}>\r\n      <p>\r\n        {player.name} / {player.ships.length} left\r\n      </p>\r\n      <div className={`flex flex-wrap`}>\r\n        {getBoardArray(seaSize).map((id) => {\r\n          return (\r\n            <div\r\n              key={id}\r\n              className={`\r\n                relative \r\n                w-1/${seaSize} \r\n                ${\r\n                  player.destroyedShips.includes(id)\r\n                    ? `bg-${playerColor[player.name]}`\r\n                    : null\r\n                }`}\r\n            >\r\n              {player.destroyedShips.includes(id) ? (\r\n                <ShipView direction={playerShipDirection[player.name]} />\r\n              ) : null}\r\n              <Cell\r\n                id={id}\r\n                disabled={\r\n                  currentPlayer === player.name || oponent.move.includes(id)\r\n                }\r\n                onTarget={onTarget}\r\n                destroyed={player.destroyedShips.includes(id)}\r\n              />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { movePlayer1, movePlayer2, selectBoard } from \"../boardSlice\";\r\nimport { Sea } from \"../view/Sea\";\r\n\r\ninterface SeaConnectInterface {\r\n  seaOwner: string;\r\n}\r\n\r\nexport function SeaConnect({ seaOwner }: SeaConnectInterface) {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleTarget(id: number) {\r\n    if (board.currentPlayer === \"player1\") {\r\n      dispatch(movePlayer1(id));\r\n    }\r\n    if (board.currentPlayer === \"player2\") {\r\n      dispatch(movePlayer2(id));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Sea\r\n      seaSize={board.seaSize}\r\n      currentPlayer={board.currentPlayer}\r\n      player={board[seaOwner]}\r\n      oponent={board[seaOwner === \"player1\" ? \"player2\" : \"player1\"]}\r\n      onTarget={handleTarget}\r\n    />\r\n  );\r\n}\r\n","interface ButtonInterface {\r\n  text: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport function Button({ text, onClick }: ButtonInterface) {\r\n  const style = `\r\n    py-2\r\n    px-4 \r\n    bg-blue-500 \r\n    hover:bg-blue-400 \r\n    text-blue-900\r\n    shadow-none\r\n    hover:shadow-md\r\n    cursor-pointer\r\n    focus:outline-none \r\n    focus:shadow-outline\r\n    `;\r\n\r\n  return (\r\n    <button onClick={onClick} className={style}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","import { useDispatch } from \"react-redux\";\r\nimport { reset } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayAgainConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleReset() {\r\n    dispatch(reset());\r\n  }\r\n\r\n  return <Button text=\"PLAY AGAIN\" onClick={handleReset} />;\r\n}\r\n","import { TextWithExplane } from \"../../common/TextWithExplane\";\r\nimport { SeaConnect } from \"../connect/SeaConnect\";\r\nimport { PlayAgainConnect } from \"../connect/PlayAgainConnect\";\r\nimport { playerColor } from \"../playerColorAndShip\";\r\n\r\ninterface GameInterface {\r\n  winner: string | null;\r\n  currentPlayer: string | null;\r\n}\r\n\r\nexport function Game({ winner, currentPlayer }: GameInterface) {\r\n  return winner ? (\r\n    <>\r\n      <TextWithExplane\r\n        explane=\"WIN\"\r\n        union=\"!\"\r\n        text={winner}\r\n        color={currentPlayer !== null ? playerColor[winner] : undefined}\r\n      />\r\n      <br />\r\n      <PlayAgainConnect />\r\n    </>\r\n  ) : (\r\n    <div className=\"flex flex-col\">\r\n      <TextWithExplane\r\n        explane=\"ATTACKS\"\r\n        union=\"!\"\r\n        text={currentPlayer}\r\n        color={currentPlayer !== null ? playerColor[currentPlayer] : undefined}\r\n      />\r\n      <div className=\"flex w-screen justify-center\">\r\n        <SeaConnect seaOwner={\"player1\"} />\r\n        <SeaConnect seaOwner={\"player2\"} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard, shipsPlayer1, shipsPlayer2 } from \"../boardSlice\";\r\nimport { getShipsPlayer } from \"../getArrayFunctions\";\r\nimport { Game } from \"../view/Game\";\r\n\r\nexport function GameConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(shipsPlayer1(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n    dispatch(shipsPlayer2(getShipsPlayer(board.numberOfShips, board.seaSize)));\r\n  }, [dispatch, board.numberOfShips, board.seaSize]);\r\n\r\n  return <Game currentPlayer={board.currentPlayer} winner={board.winner} />;\r\n}\r\n","import { playerColor } from \"../playerColorAndShip\";\r\n\r\nexport function GameName() {\r\n  return (\r\n    <div className=\"text-7xl italic\">\r\n      <span className={`text-${playerColor.player1}`}>SEA</span>\r\n      <span className={`text-${playerColor.player2}`}>BATTLE</span>\r\n    </div>\r\n  );\r\n}\r\n","interface SelectInterface {\r\n  labelText: string;\r\n  defaultValue: number;\r\n  selectArray: Array<number>;\r\n  setValue: (value: number) => void;\r\n  viewModificator: (value: number) => string;\r\n}\r\n\r\nexport function Select({\r\n  labelText,\r\n  defaultValue,\r\n  selectArray,\r\n  setValue,\r\n  viewModificator,\r\n}: SelectInterface) {\r\n  function handleClick(value: number) {\r\n    setValue(Number(value));\r\n  }\r\n\r\n  return (\r\n    <div className=\"pb-2\">\r\n      <div className=\"flex justify-evenly w-80\">\r\n        {selectArray.map((item: number) => {\r\n          return (\r\n            <div\r\n              key={item}\r\n              className={`flex-1 cursor-pointer ${\r\n                item === defaultValue\r\n                  ? \"text-blue-800 bg-blue-500 hover:bg-blue-500 shadow-md transform scale-125\"\r\n                  : \"text-blue-500\"\r\n              }`}\r\n              onClick={() => handleClick(item)}\r\n            >\r\n              {viewModificator(item)}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <p className=\"text-gray-400 border-t-2 border-solid border-blue-500\">{labelText}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { useDispatch } from \"react-redux\";\r\nimport { play } from \"../boardSlice\";\r\nimport { Button } from \"../../common/Button\";\r\n\r\nexport function PlayConnect() {\r\n  const dispatch = useDispatch();\r\n\r\n  function handlePlay() {\r\n    const firstPlayer = Math.random() > 0.5 ? \"player1\" : \"player2\";\r\n    dispatch(play(firstPlayer));\r\n  }\r\n\r\n  return <Button text=\"PLAY\" onClick={handlePlay} />;\r\n}\r\n","import { Select } from \"../../common/Select\";\r\nimport { PlayConnect } from \"../connect/PlayConnect\";\r\n\r\ninterface GameSettimngsInterface {\r\n  seaSize: number;\r\n  seaSizeArray: Array<number>;\r\n  setSeaSize: (value: number) => void;\r\n  numberOfShips: number;\r\n  numberOfShipsArray: Array<number>;\r\n  setNumberOfShips: (value: number) => void;\r\n}\r\n\r\nexport function GameSettings({\r\n  seaSize,\r\n  seaSizeArray,\r\n  setSeaSize,\r\n  numberOfShips,\r\n  numberOfShipsArray,\r\n  setNumberOfShips,\r\n}: GameSettimngsInterface) {\r\n  return (\r\n    <div className=\"m-4\">\r\n      <Select\r\n        labelText=\"Field size\"\r\n        defaultValue={seaSize}\r\n        selectArray={seaSizeArray}\r\n        setValue={setSeaSize}\r\n        viewModificator={(size: number) => `${size}x${size}`}\r\n      />\r\n      <Select\r\n        labelText=\"Number of ships\"\r\n        defaultValue={numberOfShips}\r\n        selectArray={numberOfShipsArray}\r\n        setValue={setNumberOfShips}\r\n        viewModificator={(number: number) => `${number}`}\r\n      />\r\n      <PlayConnect />\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { seaSize, numberOfShips } from \"../boardSlice\";\r\nimport { GameSettings } from \"../view/GameSettings\";\r\nimport { getShipsArray } from \"../getArrayFunctions\";\r\n\r\nexport function GameSettingsConnect() {\r\n  const board = useSelector(selectBoard);\r\n  const dispatch = useDispatch();\r\n\r\n  const numberOfShipsArray = getShipsArray(\r\n    board.seaSize,\r\n    Math.round((board.seaSize * board.seaSize) / 2)\r\n  );\r\n\r\n  function setSeaSize(value: number) {\r\n    dispatch(seaSize(value));\r\n  }\r\n\r\n  function setNumberOfShips(value: number) {\r\n    dispatch(numberOfShips(value));\r\n  }\r\n\r\n  return (\r\n    <GameSettings\r\n      seaSize={board.seaSize}\r\n      seaSizeArray={board.selectSeaSize}\r\n      setSeaSize={setSeaSize}\r\n      numberOfShips={board.numberOfShips}\r\n      numberOfShipsArray={numberOfShipsArray}\r\n      setNumberOfShips={setNumberOfShips}\r\n    />\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport function Rulles() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const style = `\r\n    text-gray-400\r\n    cursor-pointer\r\n    `;\r\n  return (\r\n    <div>\r\n      <span\r\n        className={isOpen ? style : `underline ${style}`}\r\n        onClick={() => {\r\n          setIsOpen(!isOpen);\r\n        }}\r\n      >\r\n        Game rulle\r\n      </span>\r\n      <div className=\"text-left max-w-mx text-gray-400\" hidden={!isOpen}>\r\n        <p>You're have several solo ships.</p>\r\n        <p>They are distributed randomly across the playing field.</p>\r\n        <p>Each player makes one move.</p>\r\n        <p>Knock out all the ships from the enemy field!</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { GameConnect } from \"../connect/GameConnect\";\r\nimport { GameName } from \"./GameName\";\r\nimport { GameSettingsConnect } from \"../connect/GameSettingsConnect\";\r\nimport { Rulles } from \"./Rulles\";\r\n\r\ninterface BoardInterface {\r\n  play: boolean;\r\n}\r\n\r\nexport function Board({ play }: BoardInterface) {\r\n  return (\r\n    <div\r\n      className=\"\r\n        text-2xl\r\n        p-2 \r\n        h-screen\r\n        flex \r\n        flex-col \r\n        items-center \r\n        justify-center\r\n        text-center text-white\"\r\n    >\r\n      {play ? (\r\n        <GameConnect />\r\n      ) : (\r\n        <>\r\n          <GameName />\r\n          <div className=\"text-gray-400 -mt-4\">for two players</div>\r\n          <GameSettingsConnect />\r\n          <Rulles />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { selectBoard } from \"../boardSlice\";\r\nimport { Board } from \"../view/Board\";\r\n\r\nexport function BoardConnect() {\r\n  const board = useSelector(selectBoard);\r\n  return <Board play={board.play} />;\r\n}\r\n","export default function Background() {\r\n  return (\r\n    <>\r\n      <div\r\n        className={`\r\n        top-0 \r\n        back \r\n        fixed\r\n        h-screen \r\n        w-screen\r\n        bg-blue-900\r\n        \r\n        `}\r\n      ></div>\r\n      <div\r\n        className={`\r\n      top-0 \r\n      back \r\n      fixed\r\n      h-screen \r\n      w-screen\r\n      bg-gradient-to-b from-black via-blue-900 to-black\r\n      opacity-50\r\n      `}\r\n      ></div>\r\n      <div\r\n        className={`\r\n      top-0 \r\n      back \r\n      fixed\r\n      h-screen \r\n      w-screen\r\n      bg-gradient-to-r from-black via-gray-900 to-black\r\n      opacity-30\r\n      `}\r\n      ></div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport { BoardConnect } from \"./board/connect/BoardConnect\";\nimport Background from \"./common/Background\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoardConnect />\n      <Background />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport boardReducer from \"../board/boardSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    board: boardReducer\r\n  }\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}